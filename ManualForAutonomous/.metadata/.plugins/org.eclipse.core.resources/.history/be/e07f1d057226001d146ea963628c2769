package Autonoums.controller;


import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import Autonoums.ExtendedProfile;
import Autonoums.repository.ExtendedProfileRepository;

@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/api")
public class ExtendedprofController {
	@Autowired
	ExtendedProfile extendedprof;
	 @Autowired
	 ExtendedprofRepository extendedprofRepository;
	 @GetMapping("/tutorials")
	  public ResponseEntity<List<ExtendedProfile>> getAllTutorials(@RequestParam(required = false) String programmeyear) {
	    try {
	    	System.out.println("is programmeyear empty ==>"+programmeyear);
	      List<ExtendedProfile> extendedprof = new ArrayList<ExtendedProfile>();
	      if (programmeyear == null) {
	    	  System.out.println("extendedprofRepository.findAll()==>"+extendedprofRepository.findAll());
	    	  extendedprofRepository.findAll().forEach(extendedprof::add);
	      }
	      else
	    	  extendedprofRepository.findByProgrammeyearContaining(programmeyear).forEach(extendedprof::add);
	      if (extendedprof.isEmpty()) {
	        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	      }
	      ExtendedProfile rec = extendedprofile.get(0);
	      System.out.println("extendedprofile ex==>"+rec.getBuiltupareainsqmts());
	      System.out.println("extendedprofile is==>"+extendedprofile.get(0));
	      return new ResponseEntity<>(extendedprofile, HttpStatus.OK);
	    } catch (Exception e) {
	      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	  }
	  @GetMapping("/tutorials/{id}")
	  public ResponseEntity<ExtendedProfile> getTutorialById(@PathVariable("id") long id) {
	    Optional<ExtendedProfile> tutorialData =extendedprofRepository.findById(id);
	    if (tutorialData.isPresent()) {
	      return new ResponseEntity<>(tutorialData.get(), HttpStatus.OK);
	    } else {
	      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	  }
	
}
